#define gup_set_bool_print(xs) _gup_set_bool_print(xs, #xs)
void _gup_set_bool_print(GupSetBool xs, const char *xs_name) {
    printf("%s: {", xs_name);
    bool preceeding_comma = false;
    for (int i = 0; i < xs.capacity; i++) {
        for (int j = 0; j < xs.data[i].count; j++) {
            if (preceeding_comma) printf(", ");
            printf("%d", xs.data[i].data[j]);
            preceeding_comma = true;
        }
    printf("}\n");
}

#define gup_set_char_print(xs) _gup_set_char_print(xs, #xs)
void _gup_set_char_print(GupSetChar xs, const char *xs_name) {
    printf("%s: {", xs_name);
    bool preceeding_comma = false;
    for (int i = 0; i < xs.capacity; i++) {
        for (int j = 0; j < xs.data[i].count; j++) {
            if (preceeding_comma) printf(", ");
            printf("%c", xs.data[i].data[j]);
            preceeding_comma = true;
        }
    printf("}\n");
}

#define gup_set_double_print(xs) _gup_set_double_print(xs, #xs)
void _gup_set_double_print(GupSetDouble xs, const char *xs_name) {
    printf("%s: {", xs_name);
    bool preceeding_comma = false;
    for (int i = 0; i < xs.capacity; i++) {
        for (int j = 0; j < xs.data[i].count; j++) {
            if (preceeding_comma) printf(", ");
            printf("%f", xs.data[i].data[j]);
            preceeding_comma = true;
        }
    printf("}\n");
}

#define gup_set_float_print(xs) _gup_set_float_print(xs, #xs)
void _gup_set_float_print(GupSetFloat xs, const char *xs_name) {
    printf("%s: {", xs_name);
    bool preceeding_comma = false;
    for (int i = 0; i < xs.capacity; i++) {
        for (int j = 0; j < xs.data[i].count; j++) {
            if (preceeding_comma) printf(", ");
            printf("%f", xs.data[i].data[j]);
            preceeding_comma = true;
        }
    printf("}\n");
}

#define gup_set_int_print(xs) _gup_set_int_print(xs, #xs)
void _gup_set_int_print(GupSetInt xs, const char *xs_name) {
    printf("%s: {", xs_name);
    bool preceeding_comma = false;
    for (int i = 0; i < xs.capacity; i++) {
        for (int j = 0; j < xs.data[i].count; j++) {
            if (preceeding_comma) printf(", ");
            printf("%d", xs.data[i].data[j]);
            preceeding_comma = true;
        }
    printf("}\n");
}

#define gup_set_long_print(xs) _gup_set_long_print(xs, #xs)
void _gup_set_long_print(GupSetLong xs, const char *xs_name) {
    printf("%s: {", xs_name);
    bool preceeding_comma = false;
    for (int i = 0; i < xs.capacity; i++) {
        for (int j = 0; j < xs.data[i].count; j++) {
            if (preceeding_comma) printf(", ");
            printf("%ld", xs.data[i].data[j]);
            preceeding_comma = true;
        }
    printf("}\n");
}

#define gup_set_ptr_print(xs) _gup_set_ptr_print(xs, #xs)
void _gup_set_ptr_print(GupSetPtr xs, const char *xs_name) {
    printf("%s: {", xs_name);
    bool preceeding_comma = false;
    for (int i = 0; i < xs.capacity; i++) {
        for (int j = 0; j < xs.data[i].count; j++) {
            if (preceeding_comma) printf(", ");
            printf("%p", xs.data[i].data[j]);
            preceeding_comma = true;
        }
    printf("}\n");
}

#define gup_set_short_print(xs) _gup_set_short_print(xs, #xs)
void _gup_set_short_print(GupSetShort xs, const char *xs_name) {
    printf("%s: {", xs_name);
    bool preceeding_comma = false;
    for (int i = 0; i < xs.capacity; i++) {
        for (int j = 0; j < xs.data[i].count; j++) {
            if (preceeding_comma) printf(", ");
            printf("%hd", xs.data[i].data[j]);
            preceeding_comma = true;
        }
    printf("}\n");
}

#define gup_set_string_print(xs) _gup_set_string_print(xs, #xs)
void _gup_set_string_print(GupSetString xs, const char *xs_name) {
    printf("%s: {", xs_name);
    bool preceeding_comma = false;
    for (int i = 0; i < xs.capacity; i++) {
        for (int j = 0; j < xs.data[i].count; j++) {
            if (preceeding_comma) printf(", ");
            printf("TODO", xs.data[i].data[j]);
            preceeding_comma = true;
        }
    printf("}\n");
}

#define gup_set_cstr_print(xs) _gup_set_cstr_print(xs, #xs)
void _gup_set_cstr_print(GupSetCstr xs, const char *xs_name) {
    printf("%s: {", xs_name);
    bool preceeding_comma = false;
    for (int i = 0; i < xs.capacity; i++) {
        for (int j = 0; j < xs.data[i].count; j++) {
            if (preceeding_comma) printf(", ");
            printf("%s", xs.data[i].data[j]);
            preceeding_comma = true;
        }
    printf("}\n");
}

