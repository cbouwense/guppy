GupArrayBool gup_array_bool_remove(GupArrayBool *xs, bool x, int items_to_remove) {
    GupArrayBool new_array = gup_array_bool_create();
    int removed_count = 0;

    for (int i = 0; i < xs->count && items_to_remove < count; i++) {
        if (xs->data[i] != x) {
            gup_array_bool_append(&new_array, xs->data[i]);
            removed_count++;
        }
    }

    return new_array;
}

GupArrayChar gup_array_char_remove(GupArrayChar *xs, char x, int items_to_remove) {
    GupArrayChar new_array = gup_array_char_create();
    int removed_count = 0;

    for (int i = 0; i < xs->count && items_to_remove < count; i++) {
        if (xs->data[i] != x) {
            gup_array_char_append(&new_array, xs->data[i]);
            removed_count++;
        }
    }

    return new_array;
}

GupArrayDouble gup_array_double_remove(GupArrayDouble *xs, double x, int items_to_remove) {
    GupArrayDouble new_array = gup_array_double_create();
    int removed_count = 0;

    for (int i = 0; i < xs->count && items_to_remove < count; i++) {
        if (xs->data[i] != x) {
            gup_array_double_append(&new_array, xs->data[i]);
            removed_count++;
        }
    }

    return new_array;
}

GupArrayFloat gup_array_float_remove(GupArrayFloat *xs, float x, int items_to_remove) {
    GupArrayFloat new_array = gup_array_float_create();
    int removed_count = 0;

    for (int i = 0; i < xs->count && items_to_remove < count; i++) {
        if (xs->data[i] != x) {
            gup_array_float_append(&new_array, xs->data[i]);
            removed_count++;
        }
    }

    return new_array;
}

GupArrayInt gup_array_int_remove(GupArrayInt *xs, int x, int items_to_remove) {
    GupArrayInt new_array = gup_array_int_create();
    int removed_count = 0;

    for (int i = 0; i < xs->count && items_to_remove < count; i++) {
        if (xs->data[i] != x) {
            gup_array_int_append(&new_array, xs->data[i]);
            removed_count++;
        }
    }

    return new_array;
}

GupArrayLong gup_array_long_remove(GupArrayLong *xs, long x, int items_to_remove) {
    GupArrayLong new_array = gup_array_long_create();
    int removed_count = 0;

    for (int i = 0; i < xs->count && items_to_remove < count; i++) {
        if (xs->data[i] != x) {
            gup_array_long_append(&new_array, xs->data[i]);
            removed_count++;
        }
    }

    return new_array;
}

GupArrayPtr gup_array_ptr_remove(GupArrayPtr *xs, void* x, int items_to_remove) {
    GupArrayPtr new_array = gup_array_ptr_create();
    int removed_count = 0;

    for (int i = 0; i < xs->count && items_to_remove < count; i++) {
        if (xs->data[i] != x) {
            gup_array_ptr_append(&new_array, xs->data[i]);
            removed_count++;
        }
    }

    return new_array;
}

GupArrayShort gup_array_short_remove(GupArrayShort *xs, short x, int items_to_remove) {
    GupArrayShort new_array = gup_array_short_create();
    int removed_count = 0;

    for (int i = 0; i < xs->count && items_to_remove < count; i++) {
        if (xs->data[i] != x) {
            gup_array_short_append(&new_array, xs->data[i]);
            removed_count++;
        }
    }

    return new_array;
}

