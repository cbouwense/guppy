bool gup_array_bool_find(GupArrayBool xs, bool (*fn)(bool), bool *out) {
    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            *out = xs.data[i];
            return true;
        }
    }

    return false;
}

bool gup_array_char_find(GupArrayChar xs, bool (*fn)(char), char *out) {
    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            *out = xs.data[i];
            return true;
        }
    }

    return false;
}

bool gup_array_double_find(GupArrayDouble xs, bool (*fn)(double), double *out) {
    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            *out = xs.data[i];
            return true;
        }
    }

    return false;
}

bool gup_array_float_find(GupArrayFloat xs, bool (*fn)(float), float *out) {
    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            *out = xs.data[i];
            return true;
        }
    }

    return false;
}

bool gup_array_int_find(GupArrayInt xs, bool (*fn)(int), int *out) {
    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            *out = xs.data[i];
            return true;
        }
    }

    return false;
}

bool gup_array_long_find(GupArrayLong xs, bool (*fn)(long), long *out) {
    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            *out = xs.data[i];
            return true;
        }
    }

    return false;
}

bool gup_array_ptr_find(GupArrayPtr xs, bool (*fn)(void*), void* *out) {
    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            *out = xs.data[i];
            return true;
        }
    }

    return false;
}

bool gup_array_short_find(GupArrayShort xs, bool (*fn)(short), short *out) {
    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            *out = xs.data[i];
            return true;
        }
    }

    return false;
}

bool gup_array_string_find(GupArrayString xs, bool (*fn)(GupArrayChar), GupArrayChar *out) {
    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            *out = xs.data[i];
            return true;
        }
    }

    return false;
}

