GupArrayBool gup_array_bool_filter(GupArrayBool xs, bool (*fn)(bool)) {
    GupArrayBool new = gup_array_bool_create();

    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            gup_array_bool_append(&new, xs.data[i]);
        }
    }

    return new;
}

GupArrayChar gup_array_char_filter(GupArrayChar xs, bool (*fn)(char)) {
    GupArrayChar new = gup_array_char_create();

    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            gup_array_char_append(&new, xs.data[i]);
        }
    }

    return new;
}

GupArrayDouble gup_array_double_filter(GupArrayDouble xs, bool (*fn)(double)) {
    GupArrayDouble new = gup_array_double_create();

    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            gup_array_double_append(&new, xs.data[i]);
        }
    }

    return new;
}

GupArrayFloat gup_array_float_filter(GupArrayFloat xs, bool (*fn)(float)) {
    GupArrayFloat new = gup_array_float_create();

    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            gup_array_float_append(&new, xs.data[i]);
        }
    }

    return new;
}

GupArrayInt gup_array_int_filter(GupArrayInt xs, bool (*fn)(int)) {
    GupArrayInt new = gup_array_int_create();

    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            gup_array_int_append(&new, xs.data[i]);
        }
    }

    return new;
}

GupArrayLong gup_array_long_filter(GupArrayLong xs, bool (*fn)(long)) {
    GupArrayLong new = gup_array_long_create();

    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            gup_array_long_append(&new, xs.data[i]);
        }
    }

    return new;
}

GupArrayShort gup_array_short_filter(GupArrayShort xs, bool (*fn)(short)) {
    GupArrayShort new = gup_array_short_create();

    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            gup_array_short_append(&new, xs.data[i]);
        }
    }

    return new;
}

GupArrayPtr gup_array_ptr_filter(GupArrayPtr xs, bool (*fn)(void*)) {
    GupArrayPtr new = gup_array_ptr_create();

    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            gup_array_ptr_append(&new, xs.data[i]);
        }
    }

    return new;
}

GupArrayString gup_array_string_filter(GupArrayString xs, bool (*fn)(GupArrayChar)) {
    GupArrayString new = gup_array_string_create();

    for (int i = 0; i < xs.count; i++) {
        if (fn(xs.data[i])) {
            gup_array_string_append(&new, xs.data[i]);
        }
    }

    return new;
}

