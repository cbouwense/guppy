bool gup_array_reduce_bool(GupArrayBool xs, bool (*fn)(bool, bool), bool start) {
    bool result = start;
    for (int i = 0; i < xs.count; i++) {
        result = fn(result, xs.data[i]);
    }
    return result;
}

char gup_array_reduce_char(GupArrayChar xs, char (*fn)(char, char), char start) {
    char result = start;
    for (int i = 0; i < xs.count; i++) {
        result = fn(result, xs.data[i]);
    }
    return result;
}

double gup_array_reduce_double(GupArrayDouble xs, double (*fn)(double, double), double start) {
    double result = start;
    for (int i = 0; i < xs.count; i++) {
        result = fn(result, xs.data[i]);
    }
    return result;
}

float gup_array_reduce_float(GupArrayFloat xs, float (*fn)(float, float), float start) {
    float result = start;
    for (int i = 0; i < xs.count; i++) {
        result = fn(result, xs.data[i]);
    }
    return result;
}

int gup_array_reduce_int(GupArrayInt xs, int (*fn)(int, int), int start) {
    int result = start;
    for (int i = 0; i < xs.count; i++) {
        result = fn(result, xs.data[i]);
    }
    return result;
}

long gup_array_reduce_long(GupArrayLong xs, long (*fn)(long, long), long start) {
    long result = start;
    for (int i = 0; i < xs.count; i++) {
        result = fn(result, xs.data[i]);
    }
    return result;
}

short gup_array_reduce_short(GupArrayShort xs, short (*fn)(short, short), short start) {
    short result = start;
    for (int i = 0; i < xs.count; i++) {
        result = fn(result, xs.data[i]);
    }
    return result;
}

void* gup_array_reduce_ptr(GupArrayPtr xs, void* (*fn)(void*, void*), void* start) {
    void* result = start;
    for (int i = 0; i < xs.count; i++) {
        result = fn(result, xs.data[i]);
    }
    return result;
}

GupArrayChar gup_array_reduce_string(GupArrayString xs, GupArrayChar (*fn)(GupArrayChar, GupArrayChar), GupArrayChar start) {
    GupArrayChar result = start;
    for (int i = 0; i < xs.count; i++) {
        result = fn(result, xs.data[i]);
    }
    return result;
}

